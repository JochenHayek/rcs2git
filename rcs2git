#! /usr/bin/perl -s

# usage:
#
#   ~/git-servers/github.com/knuta/rcs2git/rcs2git -authors_file=$HOME/etc/users.txt â€¦

use strict;
use warnings;
use File::Find;
use Encode;
use Encode::Guess;

our($authors_file);

our(%table_authors);

sub fix_charset($) {
        my ($data) = @_;
        my $enc = guess_encoding($data, qw/"iso-8859-1/);
	if (!ref($enc)) {
		if ($enc eq "iso-8859-1 or utf8") {
			return $data;
		} elsif ($enc eq "No appropriate encodings found!") {
			# No idea what's going on here, just strip off non-ascii data
			$data =~ s/[\x80-\xff]//g;
			return $data;
		}
	}
        ref($enc) or die "Can't guess: $enc for $data"; # trap error this way
        return encode("utf8", $enc->decode($data));
}

sub read_until_sep ($) {
	my ($fd) = @_;
	my $buf = "";
	while (<$fd>) {
		$_ = fix_charset($_);
		if (/^-{28}$/ || /^={77}$/) {
			my $next_line = <$fd>;
			if (!defined $next_line || $next_line =~ /^revision ([\d.]+)/) {
				return ($buf, $1);
			} else {
				$buf .= $_.$next_line;
			}
		} else {
			$buf .= $_;
		}
	}
	return ($buf, undef);
}

sub rcs_log ($) {
	my ($file) = @_;

	printf STDERR "=%03.3d: %s=>{%s} // %s\n",__LINE__,
	  '$file' => $file,
	  '...'
	  if 0;

	open (my $fd, "-|", "rlog", $file) or die "Unable to execute rlog $file: $!";
	# Fast forward to description
	while (<$fd>) {
		last if /^description:/;
	}
	chomp(my ($desc, $next_rev) = read_until_sep($fd));
	my @log;
	while (defined $next_rev) {
		my $header = <$fd>;
		if (defined $header && $header =~ /^date: ([^;]+);  author: ([^;]+);/) {
			my $date = $1;
			my $author = $2;
			my $rev = $next_rev;
			my $message;
			($message, $next_rev) = read_until_sep($fd);
			chomp $message;
			push @log, {
				date => $date,
				author => $author,
				rev => $rev,
				message => $message };
		} else {
			die "Logic error, no header found"
		}
	}
	@log = reverse @log;
	my %data = ( desc => $desc, log => \@log );
	close $fd;
	return \%data;
}

sub init_authors_file
{
  my($package,$filename,$line,$proc_name) = caller(0);

  my(%param) = @_;

  # $param{authors_file}
  # $param{...}

  my($return_value) = 0;

  my($fh_authors_file);
  open($fh_authors_file,$param{authors_file}) || die "cannot open: {$param{authors_file}}";

  while(<$fh_authors_file>)
    {
      chomp;

      m/^#/ && next;

      if(m/^ (?<lhs>\w+) \s* = \s* (?<rhs> (?<name>.*?) \s* <(?<address>.*>) ) $ /x)
	{
	  my(%plus) = %+;

	  printf STDERR "=%03.3d: %s=>{%s} // %s\n",__LINE__,
	    '$_' => $_,
	    '...'
	    if 0;

	  printf STDERR "=%03.3d: %s=>{%s},%s=>{%s} // %s\n",__LINE__,
	    '$plus{lhs}' => $plus{lhs},
	  ##'$plus{name}' => $plus{name},
	    '$plus{rhs}' => $plus{rhs},
	    '...'
	    if 0;

	  $main::table_authors{ $plus{lhs} } = $plus{rhs};
	}
    }

  close($fh_authors_file);

  return $return_value;
}

sub rcs_user_to_git_user($) {
	my ($user) = @_;

	if(exists($main::table_authors{$user}))
	  {
	    return $main::table_authors{$user};
	  }
	else
	  {
	    my $domain;
	  ##chomp($domain = `hostname -d`); # OS X does not have "-d" at all, my "Synologies" only yield ''
	    $domain = "localhost" unless $domain;

	    my $gcos = $user;
	    my @user_data = getpwnam($user);
	    if (@user_data && $user_data[6]) {
		    $gcos = $user_data[6];
		    $gcos =~ s/,.*//;
	    }

	    return "$gcos <$user\@$domain>";
	  }
}

sub rcs_date_to_git_date ($) {
	my ($date) = @_;
	$date =~ y,/,-,;
	my ($year, $rest) = split("-", $date, 2);
	$year += 100 if ($year < 1950); # Compensate for y2k bugs
	return "$year-$rest";
}

sub read_file ($) {
	my ($file) = @_;
	open (my $fd, $file) or die "Unable to open $file for reading: $!";
	local $/ = undef; # Slurp mode
	my $data = <$fd>;
	close $fd;
	return $data;
}

sub write_file ($$) {
	open (my $fd, ">", $_[0]) or die "Unable to open $_[0] for writing: $!";
	print $fd $_[1];
	close $fd;
}

sub cmd (@) {
	my $str_cmd = join(" ", map { my $s = $_; $s = "\"$_\"" if $s =~ / /; $s } @_);
	print STDERR "+ $str_cmd\n";
	my $exit_status = system(@_);
	die "Failed to execute $str_cmd: Process exited with status $exit_status" if $exit_status != 0;
}

sub rcs_checkout ($$) {
	my ($file, $rev) = @_;
	cmd("co", "-f", "-r$rev", $file);
}

sub git_commit ($$) {
	my ($file, $data) = @_;
	cmd("git", "add", $file);
	my @cmd = qw(git commit --allow-empty-message --allow-empty);
	push @cmd, "--message", ($data->{message} ? $data->{message} : "");
	push @cmd, "--author", rcs_user_to_git_user($data->{author}) if ($data->{author});
	push @cmd, "--date", $data->{date} if ($data->{date});
	cmd(@cmd);
}

sub setperms ($@) {
	my ($file, @stat) = @_;
	chmod $stat[2] | 0200, $file;
	chown $stat[4], $stat[5], $file;
}

sub convert_rcs_file ($) {
	my ($file) = @_;

	printf STDERR "=%03.3d: %s=>{%s} // %s\n",__LINE__,
	  '$file' => $file,
	  '...'
	  if 0;

	my $data = rcs_log($file);
	if ($data->{log}[0]{message} eq "Initial revision") {
		$data->{log}[0]{message} = $data->{desc};
	} else {
		$data->{log}[0]{message} = $data->{desc} . "\n\n" . $data->{log}[0]{message};
	}
	my $current = read_file($file);
	my @stat = stat $file;
	eval {
		foreach my $entry (@{$data->{log}}) {
			$entry->{date} = rcs_date_to_git_date($entry->{date});
			rcs_checkout($file, $entry->{rev});
			setperms($file, @stat);
			git_commit($file, $entry);
		}
	};
	my $eval_error = $@;
	# Always write the original content of the file, in case of failure
	write_file($file, $current);
	setperms($file, @stat);
	if ($eval_error) {
		die "Failure during conversion of $file: $@";
	} elsif (`git diff | wc -l` > 0) {
		git_commit($file, { message => "Uncommitted changes" });
	}
}

{
  # -authors_file=$HOME/etc/users.txt
  if(defined($main::authors_file))
    {
      printf STDERR "=%03.3d: %s=>{%s} // %s\n",__LINE__,
	'$main::authors_file' => $main::authors_file,
	'...'
	if 1;
      init_authors_file( 'authors_file' => $main::authors_file );
    }

  foreach my $arg (@ARGV)
    {
      printf STDERR "=%03.3d: %s=>{%s} // %s\n",__LINE__,
	'$arg' => $arg,
	'...'
	if 0;

      if(-e "${arg},v" || -e "RCS/${arg},v" || -e "RCS/${arg}")
	{
	  print "Converting RCS tracked file ${arg}\n";
	  convert_rcs_file(${arg});
	}
    }

  exit(0);
}

sub convert_untracked_file ($$) {
	my ($file, $fullname) = @_;
	git_commit($file, { message => "Adding previously untracked file $fullname" });
}

if (scalar @ARGV != 0) {
	print STDERR "This command is designed to convert a directory tree in-place.\n";
	print STDERR "To use it, make a copy of the directory tree, enter it, and run this script.\n";
	exit 1;
}

find(sub {
	return if /,v$/;
	return if -l $_ || -d $_;
	return if $File::Find::name =~ m,^\./\.git/,;
	if (-e "$_,v" || -e "RCS/$_,v") {
		print "Converting RCS tracked file $File::Find::name\n";
		convert_rcs_file($_);
	} else {
		print "Converting untracked file $File::Find::name\n";
		convert_untracked_file($_, $File::Find::name);
	}
}, qw(.));

